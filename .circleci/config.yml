version: 2.1

executors:
  python-executor:
    docker:
      - image: python:3.12
    working_directory: ~/mlops

  docker-executor:
    docker:
      - image: docker:20.10.14
    working_directory: ~/mlops

jobs:
  clone_repo:
    executor: python-executor
    steps:
      - checkout

  setup_python_env:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Set Up Python Environment
          command: |
            set -e  # Stop on error
            python3 -m venv venv
            ls -la
            echo "Python version:"
            python --version
            echo "Activating venv..."
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-cov

  train_model:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/mlops
      - run:
          name: Train Model
          command: |
            set -e  # Stop on error
            . venv/bin/activate
            python train.py
            pytest tests/test_train.py --junitxml=test-results.xml --cov=.

  build_docker:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true  # Enable caching
      - run:
          name: Build Docker Image
          command: |
            set -e  # Stop on error
            echo "${DOCKER_PASS}" | docker login ghcr.io -u ${DOCKER_USER} --password-stdin
            docker build -t ghcr.io/onyesi-john/mlops:latest .

  run_integration_tests:
    executor: python-executor
    steps:
      - attach_workspace:
          at: ~/mlops
      - run:
          name: Run Integration Tests
          command: |
            set -e  # Stop on error
            . venv/bin/activate
            pytest tests/integration --junitxml=test-results.xml --cov=.
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: test-results.xml

  push_docker:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Push Docker Image to GitHub Container Registry
          command: |
            set -e  # Stop on error
            echo "${DOCKER_PASS}" | docker login ghcr.io -u ${DOCKER_USER} --password-stdin
            docker push ghcr.io/onyesi-john/mlops:latest

  monitor_model:
    executor: python-executor
    steps:
      - run:
          name: Monitor Model Performance
          command: |
            set -e  # Stop on error
            curl http://localhost:9090/api/v1/query?query=loss

  trigger_retrain:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/mlops
      - run:
          name: Check Model Performance & Retrain
          command: |
            set -e  # Stop on error
            . venv/bin/activate
            loss=$(python check_loss.py)
            if (( $(echo "$loss > 0.5" | bc -l) )); then
              python retrain.py
            fi

workflows:
  version: 2
  pipeline:
    jobs:
      - clone_repo
      - setup_python_env:
          requires:
            - clone_repo
      - train_model:
          requires:
            - setup_python_env
      - run_integration_tests:
          requires:
            - train_model
      - build_docker:
          requires:
            - run_integration_tests
      - push_docker:
          requires:
            - build_docker
      - monitor_model:
          requires:
            - push_docker
      - trigger_retrain:
          requires:
            - monitor_model
